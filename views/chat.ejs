<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
    <title>Nestjs SocketIO</title>
    <link rel="stylesheet" href="styles.css">
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script type="text/javascript" src="https://cdn.socket.io/socket.io-1.4.5.js"></script>
    <style>
        #messages{
            height:300px;
            overflow-y: scroll;
        }

        #app {
            margin-top: 2rem;
        }
    </style>
</head>
<body>
<div id="app" class="container">
    <div class="row">
        <div class="col-md-6 offset-md-3 col-sm-12">
            <h1 class="text-center">{{ title }}</h1>
            <br>
            <div id="status"></div>
            <div id="chat">
                <input type="text" v-model="name" id="username" class="form-control" placeholder="Enter name...">
                <br>
                <div class="card">
                    <div id="messages" class="card-block">
                        <ul>
                            <li v-for="message of messages">{{ message.isFromUser ? message.user.firstName : message.doctor.name }}: {{ message.content }}</li>
                        </ul>
                    </div>
                </div>
                <br>
                <textarea id="textarea" class="form-control" v-model="text" placeholder="Enter message..."></textarea>
                <br>
                <button id="send" class="btn" @click.prevent="sendMessage">Send</button>
            </div>
        </div>
    </div>
</div>

<script>
    const MESSAGES_TYPES = {
        COMMAND: 'COMMAND',
        MESSAGE: 'MESSAGE',
    }

    const app = new Vue({
        el: '#app',
        data: {
            title: 'DoctorChat',
            name: '',
            text: '',
            messages: [],
            socket: null
        },
        methods: {
            sendMessage() {
                const message = {
                    chatId: 1,
                    content: this.text
                }
                this.socket.emit(MESSAGES_TYPES.MESSAGE, message)
                this.text = ''
            },
            receivedMessage(message) {
                this.messages.push(message)
            },
        },
        created() {
            fetch('/api/messages/1?token=1').then(r => r.json()).then(res => {
                this.messages = res
            })
            this.socket = io()
            this.socket.emit('AUTH', { token: 1 })
            this.socket.on(MESSAGES_TYPES.MESSAGE, (message) => {
                this.receivedMessage(message)
            })
        }
    })
</script>
</body>
</html>
